// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogNewCrp extends ethereum.Event {
  get params(): LogNewCrp__Params {
    return new LogNewCrp__Params(this);
  }
}

export class LogNewCrp__Params {
  _event: LogNewCrp;

  constructor(event: LogNewCrp) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CRPFactory__newCrpInputPoolParamsStruct extends ethereum.Tuple {
  get poolTokenSymbol(): string {
    return this[0].toString();
  }

  get poolTokenName(): string {
    return this[1].toString();
  }

  get constituentTokens(): Array<Address> {
    return this[2].toAddressArray();
  }

  get tokenBalances(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get tokenWeights(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get swapFee(): BigInt {
    return this[5].toBigInt();
  }
}

export class CRPFactory__newCrpInputRightsStruct extends ethereum.Tuple {
  get canPauseSwapping(): boolean {
    return this[0].toBoolean();
  }

  get canChangeSwapFee(): boolean {
    return this[1].toBoolean();
  }

  get canChangeWeights(): boolean {
    return this[2].toBoolean();
  }

  get canAddRemoveTokens(): boolean {
    return this[3].toBoolean();
  }

  get canWhitelistLPs(): boolean {
    return this[4].toBoolean();
  }

  get canChangeCap(): boolean {
    return this[5].toBoolean();
  }
}

export class CRPFactory extends ethereum.SmartContract {
  static bind(address: Address): CRPFactory {
    return new CRPFactory("CRPFactory", address);
  }

  isCrp(addr: Address): boolean {
    let result = super.call("isCrp", "isCrp(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isCrp(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCrp", "isCrp(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newCrp(
    factoryAddress: Address,
    poolParams: CRPFactory__newCrpInputPoolParamsStruct,
    rights: CRPFactory__newCrpInputRightsStruct
  ): Address {
    let result = super.call(
      "newCrp",
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool)):(address)",
      [
        ethereum.Value.fromAddress(factoryAddress),
        ethereum.Value.fromTuple(poolParams),
        ethereum.Value.fromTuple(rights)
      ]
    );

    return result[0].toAddress();
  }

  try_newCrp(
    factoryAddress: Address,
    poolParams: CRPFactory__newCrpInputPoolParamsStruct,
    rights: CRPFactory__newCrpInputRightsStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newCrp",
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool)):(address)",
      [
        ethereum.Value.fromAddress(factoryAddress),
        ethereum.Value.fromTuple(poolParams),
        ethereum.Value.fromTuple(rights)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class NewCrpCall extends ethereum.Call {
  get inputs(): NewCrpCall__Inputs {
    return new NewCrpCall__Inputs(this);
  }

  get outputs(): NewCrpCall__Outputs {
    return new NewCrpCall__Outputs(this);
  }
}

export class NewCrpCall__Inputs {
  _call: NewCrpCall;

  constructor(call: NewCrpCall) {
    this._call = call;
  }

  get factoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolParams(): NewCrpCallPoolParamsStruct {
    return changetype<NewCrpCallPoolParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get rights(): NewCrpCallRightsStruct {
    return changetype<NewCrpCallRightsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class NewCrpCall__Outputs {
  _call: NewCrpCall;

  constructor(call: NewCrpCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class NewCrpCallPoolParamsStruct extends ethereum.Tuple {
  get poolTokenSymbol(): string {
    return this[0].toString();
  }

  get poolTokenName(): string {
    return this[1].toString();
  }

  get constituentTokens(): Array<Address> {
    return this[2].toAddressArray();
  }

  get tokenBalances(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get tokenWeights(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get swapFee(): BigInt {
    return this[5].toBigInt();
  }
}

export class NewCrpCallRightsStruct extends ethereum.Tuple {
  get canPauseSwapping(): boolean {
    return this[0].toBoolean();
  }

  get canChangeSwapFee(): boolean {
    return this[1].toBoolean();
  }

  get canChangeWeights(): boolean {
    return this[2].toBoolean();
  }

  get canAddRemoveTokens(): boolean {
    return this[3].toBoolean();
  }

  get canWhitelistLPs(): boolean {
    return this[4].toBoolean();
  }

  get canChangeCap(): boolean {
    return this[5].toBoolean();
  }
}
